use std::sync::Arc;

use async_trait::async_trait;
use draco_interfaces::{
    types::{Block, UpdateRequest},
    ExecutionEngineSocket, PubSub,
};
use log::info;
use narwhal_executor::ExecutionState;
use narwhal_types::{Batch, BatchAPI, Certificate, ConsensusOutput};
use tokio::sync::Notify;

use crate::consensus::PubSubMsg;

pub struct Execution<P: PubSub<PubSubMsg>> {
    /// Managing certificates generated by narwhal.
    executor: ExecutionEngineSocket,
    reconfigure_notify: Arc<Notify>,
    new_block_notify: Arc<Notify>,
    _pub_sub: P,
}

impl<P: PubSub<(Certificate, Vec<Batch>)>> Execution<P> {
    pub fn new(
        executor: ExecutionEngineSocket,
        reconfigure_notify: Arc<Notify>,
        new_block_notify: Arc<Notify>,
        pub_sub: P,
    ) -> Self {
        Self {
            executor,
            reconfigure_notify,
            new_block_notify,
            _pub_sub: pub_sub,
        }
    }

    async fn submit_batch(&self, batch: Vec<Batch>) {
        let mut change_epoch = false;
        for batch in batch {
            let block = Block {
                transactions: batch
                    .transactions()
                    .iter()
                    .filter_map(|txn| bincode::deserialize::<UpdateRequest>(txn).ok())
                    .collect(),
            };
            info!("Consensus submitted new block to application");
            // Unfailable
            let results = self.executor.run(block).await.unwrap();
            if results.change_epoch {
                change_epoch = true;
            }
        }
        self.new_block_notify.notify_waiters();
        if change_epoch {
            self.reconfigure_notify.notify_waiters();
        }
    }
}

#[async_trait]
impl<P: PubSub<(Certificate, Vec<Batch>)>> ExecutionState for Execution<P> {
    async fn handle_consensus_output(&self, consensus_output: ConsensusOutput) {
        for (_, batches) in consensus_output.batches {
            self.submit_batch(batches).await
        }
    }

    async fn last_executed_sub_dag_index(&self) -> u64 {
        0
    }
}
